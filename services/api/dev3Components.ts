/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useDev3Context, Dev3Context } from "./dev3Context";
import type * as Fetcher from "./dev3Fetcher";
import { dev3Fetch } from "./dev3Fetcher";
import type * as Schemas from "./dev3Schemas";

export type ProjectControllerCreateError = Fetcher.ErrorWrapper<undefined>;

export type ProjectControllerCreateVariables = {
  body: Schemas.CreateProjectDto;
} & Dev3Context["fetcherOptions"];

export const fetchProjectControllerCreate = (
  variables: ProjectControllerCreateVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    Schemas.Project,
    ProjectControllerCreateError,
    Schemas.CreateProjectDto,
    {},
    {},
    {}
  >({ url: "/api/v1/project", method: "post", ...variables, signal });

export const useProjectControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Project,
      ProjectControllerCreateError,
      ProjectControllerCreateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDev3Context();
  return reactQuery.useMutation<
    Schemas.Project,
    ProjectControllerCreateError,
    ProjectControllerCreateVariables
  >(
    (variables: ProjectControllerCreateVariables) =>
      fetchProjectControllerCreate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ProjectControllerFindAllQueryParams = {
  id?: string;
  slug?: string;
};

export type ProjectControllerFindAllError = Fetcher.ErrorWrapper<undefined>;

export type ProjectControllerFindAllResponse = Schemas.Project[];

export type ProjectControllerFindAllVariables = {
  queryParams?: ProjectControllerFindAllQueryParams;
} & Dev3Context["fetcherOptions"];

export const fetchProjectControllerFindAll = (
  variables: ProjectControllerFindAllVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    ProjectControllerFindAllResponse,
    ProjectControllerFindAllError,
    undefined,
    {},
    ProjectControllerFindAllQueryParams,
    {}
  >({ url: "/api/v1/project", method: "get", ...variables, signal });

export const useProjectControllerFindAll = <
  TData = ProjectControllerFindAllResponse
>(
  variables: ProjectControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProjectControllerFindAllResponse,
      ProjectControllerFindAllError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useDev3Context(options);
  return reactQuery.useQuery<
    ProjectControllerFindAllResponse,
    ProjectControllerFindAllError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/project",
      operationId: "projectControllerFindAll",
      variables,
    }),
    ({ signal }) =>
      fetchProjectControllerFindAll(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProjectControllerFindOnePathParams = {
  slug: string;
};

export type ProjectControllerFindOneError = Fetcher.ErrorWrapper<undefined>;

export type ProjectControllerFindOneVariables = {
  pathParams: ProjectControllerFindOnePathParams;
} & Dev3Context["fetcherOptions"];

export const fetchProjectControllerFindOne = (
  variables: ProjectControllerFindOneVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    Schemas.Project,
    ProjectControllerFindOneError,
    undefined,
    {},
    {},
    ProjectControllerFindOnePathParams
  >({ url: "/api/v1/project/{slug}", method: "get", ...variables, signal });

export const useProjectControllerFindOne = <TData = Schemas.Project>(
  variables: ProjectControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Project,
      ProjectControllerFindOneError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useDev3Context(options);
  return reactQuery.useQuery<
    Schemas.Project,
    ProjectControllerFindOneError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/project/{slug}",
      operationId: "projectControllerFindOne",
      variables,
    }),
    ({ signal }) =>
      fetchProjectControllerFindOne(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProjectControllerUpdatePathParams = {
  id: string;
};

export type ProjectControllerUpdateError = Fetcher.ErrorWrapper<undefined>;

export type ProjectControllerUpdateVariables = {
  body?: Schemas.UpdateProjectDto;
  pathParams: ProjectControllerUpdatePathParams;
} & Dev3Context["fetcherOptions"];

export const fetchProjectControllerUpdate = (
  variables: ProjectControllerUpdateVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    Schemas.Project,
    ProjectControllerUpdateError,
    Schemas.UpdateProjectDto,
    {},
    {},
    ProjectControllerUpdatePathParams
  >({ url: "/api/v1/project/{id}", method: "patch", ...variables, signal });

export const useProjectControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Project,
      ProjectControllerUpdateError,
      ProjectControllerUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDev3Context();
  return reactQuery.useMutation<
    Schemas.Project,
    ProjectControllerUpdateError,
    ProjectControllerUpdateVariables
  >(
    (variables: ProjectControllerUpdateVariables) =>
      fetchProjectControllerUpdate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ProjectControllerRemovePathParams = {
  id: string;
};

export type ProjectControllerRemoveError = Fetcher.ErrorWrapper<undefined>;

export type ProjectControllerRemoveVariables = {
  pathParams: ProjectControllerRemovePathParams;
} & Dev3Context["fetcherOptions"];

export const fetchProjectControllerRemove = (
  variables: ProjectControllerRemoveVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    Schemas.Project,
    ProjectControllerRemoveError,
    undefined,
    {},
    {},
    ProjectControllerRemovePathParams
  >({ url: "/api/v1/project/{id}", method: "delete", ...variables, signal });

export const useProjectControllerRemove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Project,
      ProjectControllerRemoveError,
      ProjectControllerRemoveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDev3Context();
  return reactQuery.useMutation<
    Schemas.Project,
    ProjectControllerRemoveError,
    ProjectControllerRemoveVariables
  >(
    (variables: ProjectControllerRemoveVariables) =>
      fetchProjectControllerRemove({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AuthControllerNearLoginError = Fetcher.ErrorWrapper<undefined>;

export type AuthControllerNearLoginVariables = {
  body: Schemas.NearLoginDto;
} & Dev3Context["fetcherOptions"];

export const fetchAuthControllerNearLogin = (
  variables: AuthControllerNearLoginVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    Schemas.NearLoginResponse,
    AuthControllerNearLoginError,
    Schemas.NearLoginDto,
    {},
    {},
    {}
  >({ url: "/api/v1/auth/near", method: "post", ...variables, signal });

export const useAuthControllerNearLogin = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.NearLoginResponse,
      AuthControllerNearLoginError,
      AuthControllerNearLoginVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDev3Context();
  return reactQuery.useMutation<
    Schemas.NearLoginResponse,
    AuthControllerNearLoginError,
    AuthControllerNearLoginVariables
  >(
    (variables: AuthControllerNearLoginVariables) =>
      fetchAuthControllerNearLogin({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UserControllerFindMeError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerFindMeVariables = Dev3Context["fetcherOptions"];

export const fetchUserControllerFindMe = (
  variables: UserControllerFindMeVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<Schemas.User, UserControllerFindMeError, undefined, {}, {}, {}>({
    url: "/api/v1/user/me",
    method: "get",
    ...variables,
    signal,
  });

export const useUserControllerFindMe = <TData = Schemas.User>(
  variables: UserControllerFindMeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.User, UserControllerFindMeError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useDev3Context(options);
  return reactQuery.useQuery<Schemas.User, UserControllerFindMeError, TData>(
    queryKeyFn({
      path: "/api/v1/user/me",
      operationId: "userControllerFindMe",
      variables,
    }),
    ({ signal }) =>
      fetchUserControllerFindMe({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UserControllerProjectsOwnedError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerProjectsOwnedResponse = Schemas.Project[];

export type UserControllerProjectsOwnedVariables =
  Dev3Context["fetcherOptions"];

export const fetchUserControllerProjectsOwned = (
  variables: UserControllerProjectsOwnedVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    UserControllerProjectsOwnedResponse,
    UserControllerProjectsOwnedError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/api/v1/user/projects/owned",
    method: "get",
    ...variables,
    signal,
  });

export const useUserControllerProjectsOwned = <
  TData = UserControllerProjectsOwnedResponse
>(
  variables: UserControllerProjectsOwnedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UserControllerProjectsOwnedResponse,
      UserControllerProjectsOwnedError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useDev3Context(options);
  return reactQuery.useQuery<
    UserControllerProjectsOwnedResponse,
    UserControllerProjectsOwnedError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/user/projects/owned",
      operationId: "userControllerProjectsOwned",
      variables,
    }),
    ({ signal }) =>
      fetchUserControllerProjectsOwned(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UserControllerProjectsAllError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerProjectsAllResponse = Schemas.Project[];

export type UserControllerProjectsAllVariables = Dev3Context["fetcherOptions"];

export const fetchUserControllerProjectsAll = (
  variables: UserControllerProjectsAllVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    UserControllerProjectsAllResponse,
    UserControllerProjectsAllError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/v1/user/projects/all", method: "get", ...variables, signal });

export const useUserControllerProjectsAll = <
  TData = UserControllerProjectsAllResponse
>(
  variables: UserControllerProjectsAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UserControllerProjectsAllResponse,
      UserControllerProjectsAllError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useDev3Context(options);
  return reactQuery.useQuery<
    UserControllerProjectsAllResponse,
    UserControllerProjectsAllError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/user/projects/all",
      operationId: "userControllerProjectsAll",
      variables,
    }),
    ({ signal }) =>
      fetchUserControllerProjectsAll(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UserControllerCreateError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerCreateVariables = {
  body?: Schemas.CreateUserDto;
} & Dev3Context["fetcherOptions"];

export const fetchUserControllerCreate = (
  variables: UserControllerCreateVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    undefined,
    UserControllerCreateError,
    Schemas.CreateUserDto,
    {},
    {},
    {}
  >({ url: "/api/v1/user", method: "post", ...variables, signal });

export const useUserControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UserControllerCreateError,
      UserControllerCreateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDev3Context();
  return reactQuery.useMutation<
    undefined,
    UserControllerCreateError,
    UserControllerCreateVariables
  >(
    (variables: UserControllerCreateVariables) =>
      fetchUserControllerCreate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UserControllerFindAllError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerFindAllResponse = Schemas.User[];

export type UserControllerFindAllVariables = Dev3Context["fetcherOptions"];

export const fetchUserControllerFindAll = (
  variables: UserControllerFindAllVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    UserControllerFindAllResponse,
    UserControllerFindAllError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/v1/user", method: "get", ...variables, signal });

export const useUserControllerFindAll = <TData = UserControllerFindAllResponse>(
  variables: UserControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UserControllerFindAllResponse,
      UserControllerFindAllError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useDev3Context(options);
  return reactQuery.useQuery<
    UserControllerFindAllResponse,
    UserControllerFindAllError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/user",
      operationId: "userControllerFindAll",
      variables,
    }),
    ({ signal }) =>
      fetchUserControllerFindAll({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UserControllerFindOnePathParams = {
  uid: string;
};

export type UserControllerFindOneError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerFindOneVariables = {
  pathParams: UserControllerFindOnePathParams;
} & Dev3Context["fetcherOptions"];

export const fetchUserControllerFindOne = (
  variables: UserControllerFindOneVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    undefined,
    UserControllerFindOneError,
    undefined,
    {},
    {},
    UserControllerFindOnePathParams
  >({ url: "/api/v1/user/{uid}", method: "get", ...variables, signal });

export const useUserControllerFindOne = <TData = undefined>(
  variables: UserControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, UserControllerFindOneError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useDev3Context(options);
  return reactQuery.useQuery<undefined, UserControllerFindOneError, TData>(
    queryKeyFn({
      path: "/api/v1/user/{uid}",
      operationId: "userControllerFindOne",
      variables,
    }),
    ({ signal }) =>
      fetchUserControllerFindOne({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UserControllerUpdatePathParams = {
  id: string;
};

export type UserControllerUpdateError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerUpdateVariables = {
  body?: Schemas.UpdateUserDto;
  pathParams: UserControllerUpdatePathParams;
} & Dev3Context["fetcherOptions"];

export const fetchUserControllerUpdate = (
  variables: UserControllerUpdateVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    undefined,
    UserControllerUpdateError,
    Schemas.UpdateUserDto,
    {},
    {},
    UserControllerUpdatePathParams
  >({ url: "/api/v1/user/{id}", method: "patch", ...variables, signal });

export const useUserControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UserControllerUpdateError,
      UserControllerUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDev3Context();
  return reactQuery.useMutation<
    undefined,
    UserControllerUpdateError,
    UserControllerUpdateVariables
  >(
    (variables: UserControllerUpdateVariables) =>
      fetchUserControllerUpdate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UserControllerRemovePathParams = {
  id: string;
};

export type UserControllerRemoveError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerRemoveVariables = {
  pathParams: UserControllerRemovePathParams;
} & Dev3Context["fetcherOptions"];

export const fetchUserControllerRemove = (
  variables: UserControllerRemoveVariables,
  signal?: AbortSignal
) =>
  dev3Fetch<
    undefined,
    UserControllerRemoveError,
    undefined,
    {},
    {},
    UserControllerRemovePathParams
  >({ url: "/api/v1/user/{id}", method: "delete", ...variables, signal });

export const useUserControllerRemove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UserControllerRemoveError,
      UserControllerRemoveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDev3Context();
  return reactQuery.useMutation<
    undefined,
    UserControllerRemoveError,
    UserControllerRemoveVariables
  >(
    (variables: UserControllerRemoveVariables) =>
      fetchUserControllerRemove({ ...fetcherOptions, ...variables }),
    options
  );
};

export type QueryOperation =
  | {
      path: "/api/v1/project";
      operationId: "projectControllerFindAll";
      variables: ProjectControllerFindAllVariables;
    }
  | {
      path: "/api/v1/project/{slug}";
      operationId: "projectControllerFindOne";
      variables: ProjectControllerFindOneVariables;
    }
  | {
      path: "/api/v1/user/me";
      operationId: "userControllerFindMe";
      variables: UserControllerFindMeVariables;
    }
  | {
      path: "/api/v1/user/projects/owned";
      operationId: "userControllerProjectsOwned";
      variables: UserControllerProjectsOwnedVariables;
    }
  | {
      path: "/api/v1/user/projects/all";
      operationId: "userControllerProjectsAll";
      variables: UserControllerProjectsAllVariables;
    }
  | {
      path: "/api/v1/user";
      operationId: "userControllerFindAll";
      variables: UserControllerFindAllVariables;
    }
  | {
      path: "/api/v1/user/{uid}";
      operationId: "userControllerFindOne";
      variables: UserControllerFindOneVariables;
    };
